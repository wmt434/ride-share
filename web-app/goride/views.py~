from django.shortcuts import render
from django.http import HttpResponse
from .models import Ride
from django.views.generic import ListView, DetailView, CreateView, DeleteView, TemplateView, UpdateView
from bootstrap_datepicker_plus import DateTimePickerInput
from django.contrib.admin import widgets
from django.contrib.auth.mixins import LoginRequiredMixin, UserPassesTestMixin
from django.db.models import Q
from django.contrib.auth.decorators import login_required
from django import forms
from django.urls import reverse
from django.core.mail import send_mail
from django.utils import timezone


def home(request):
	context = {
		'rides': Ride.objects.filter(owner=request.user),
	}
	return render(request, 'goride/home.html', context)

class RideListView(ListView):
	model = Ride
	template_name = 'goride/home.html'
	context_object_name = 'rides'
	ordering = ['-start_time']

	def get_queryset(self):
		new_context = Ride.objects.filter(Q(owner=self.request.user)|Q(sharer = self.request.user)|Q(driver = self.request.user))
		return new_context

def CurrentView(request):
	drives = Ride.objects.filter(Q(driver=request.user) & ~Q(status='c')& Q(required_arrival__gt = timezone.localtime()))
	rides = Ride.objects.filter(Q(owner=request.user) & ~Q(status='c')& Q(required_arrival__gt = timezone.localtime()))
	shares = Ride.objects.filter(Q(sharer=request.user) & ~Q(status='c')& Q(required_arrival__gt = timezone.localtime()))
	context = {
	'drives': drives,
	'rides': rides,
	'shares': shares,
	'd_len': len(drives),
	'r_len': len(rides),
	's_len': len(shares)
	}
	print("number of shares order", len(shares))
	return render(request, 'goride/current.html', context)

class RideDetailView(DetailView):
	model = Ride

def about(request):
    return HttpResponse(request, 'goride/about.html')


class RideCreateView(LoginRequiredMixin,CreateView):
	model = Ride
	fields = ['destination','required_arrival','number_of_owner_party', 'Share_with_others']
	def get_form(self):
		form = super().get_form()
		form.fields['required_arrival'].widget = DateTimePickerInput()
		return form

	def form_valid(self, form):
		form.instance.owner = self.request.user
		form.instance.number_of_passenger = form.instance.number_of_owner_party

		return super().form_valid(form)
		#return reverse('current')

class RideUpdateView(LoginRequiredMixin, UserPassesTestMixin, UpdateView):
	model = Ride
	fields = ['destination','required_arrival','number_of_owner_party', 'Share_with_others']
	template_name = 'goride/ride_update.html'
	def get_form(self):
		form = super().get_form()
		form.fields['required_arrival'].widget = DateTimePickerInput()
		return form

	def form_valid(self, form):
		form.instance.owner = self.request.user
		return super().form_valid(form)

	def test_func(self):
		ride = self.get_object()
		if self.request.user == ride.owner:
		    return True
		return False

class RideDeleteView(LoginRequiredMixin,UserPassesTestMixin,DeleteView):
	model = Ride
	success_url = '/current/'

	def test_func(self):
		ride = self.get_object()
		if self.request.user == ride.owner:
		    return True
		return False

class ShareForm(forms.Form):
	destination=forms.CharField(max_length=128)
	earliest_arrival=forms.DateTimeField(widget = DateTimePickerInput(options={
                    "format": "YYYY-MM-DD HH:MM",}))
	latest_arrival=forms.DateTimeField(widget = DateTimePickerInput(options={
                    "format": "YYYY-MM-DD HH:MM",}))
	number_of_passenger=forms.IntegerField()

'''
@login_required
def shareView(request):

	if request.method == 'POST':
		form = ShareForm(request.POST)
		dest, earliest_arrival, latest_arrival, number_of_passenger = form.clean_share_data()
		s_ride = Ride.objects.filter(Q(destination = dest))
	
	else:
		form = ShareForm()
		s_ride = Ride.objects.all()
	return render(request, 'goride/share.html', {'form': form, 'rides': s_ride})
'''

def tryShare(request):
	results = []
	number_of_passenger=0
	if request.method == 'GET':
		form = ShareForm(request.GET)
		if form.is_valid():
			dest = form.cleaned_data['destination']
			earliest_arrival = request.GET.get('earliest_arrival', None)
			latest_arrival = request.GET.get('latest_arrival', None)
			number_of_passenger = request.GET.get('number_of_passenger', None)
			request.user.my_passenger = number_of_passenger
			request.user.save()
			if(dest and earliest_arrival and latest_arrival):
				results = Ride.objects.filter(sharer__isnull=True).filter(
					Q(destination = dest)
					& Q(Share_with_others = True)
					& Q(required_arrival__gte = earliest_arrival) 
					& Q(status = 'o')
					& Q(required_arrival__gt = timezone.localtime())
					& ~Q(owner = request.user)
					)
	else:
		form = ShareForm()
	count = len(results)
	return render(request, 'goride/tryshare.html', {'form': form, 'rides': results, 'count': count})

'''
@login_required
def ShareView(request):
	dest = request.GET.get('dest')
	earliest_arrival = request.GET.get('earliest_arrival')
	latest_arrival = request.GET.get('latest_arrival')
	results = []
	if(dest and earliest_arrival and latest_arrival):
		results = Ride.objects.filter(Q(destination = dest) & Q(required_arrival__gte = earliest_arrival) & Q(status = 'o'))
	#count = results.count()
	return render(request, 'goride/share.html', {'rides': results})
'''

@login_required
class SearchView(TemplateView):
	template_name = 'share.html'

@login_required
def JoinView(request, pk):
	ride = Ride.objects.get(pk = pk)
	ride.sharer = request.user
	ride.number_of_sharer_party = ride.sharer.my_passenger
	ride.number_of_passenger = ride.number_of_owner_party+ride.number_of_sharer_party
	print("total after add:", ride.number_of_passenger)
	print("owner after add:", ride.number_of_owner_party)
	print("share after add:", ride.number_of_sharer_party)
	ride.save()

	return render(request, 'goride/join.html')

#https://stackoverflow.com/questions/56610542/cannot-use-none-as-a-query-value-in-django-search-filter-showing-this-error

def PickupView(request, pk):
	ride = Ride.objects.get(pk = pk)
	ride.driver = request.user
	ride.status = 'f'
	recipient_list = [ride.owner.email]
	if(ride.sharer):
		recipient_list += ride.sharer.email
	send_mail('Your order is confirmed','Hi there! Your ride is confirmed! Please be prepared for your trip!',
		'wmtvivian97@gmail.com', recipient_list)
	ride.save()
	return render(request, 'goride/succeed.html')

def PostRideView(request, pk):
	return render(request, 'goride/succeed.html')

class DriveListView(LoginRequiredMixin, UserPassesTestMixin, ListView):
	model = Ride
	template_name = 'goride/drive.html'
	context_object_name = 'rides'
	ordering = ['-start_time']

	def get_queryset(self):
		print("max_passenger:", self.request.user.max_passenger)
		new_context = Ride.objects.filter(
			Q(status = 'o')& 
			~Q(owner = self.request.user)&
			~Q(sharer = self.request.user)&
			Q(number_of_passenger__lte = self.request.user.max_passenger)
			& Q(required_arrival__gt = timezone.localtime())
			)
		return new_context

	def test_func(self):
		if self.request.user.max_passenger:
		    return True
		return False

def ShareDeleteView(request, pk):
	ride = Ride.objects.get(pk = pk)
	return render(request, 'goride/share_confirm_delete.html', {'ride':ride})

def SuccessQuitView(request, pk):
	ride = Ride.objects.get(pk = pk)
	ride.sharer = None
	ride.number_of_passenger = ride.number_of_passenger-ride.number_of_sharer_party 
	ride.number_of_sharer_party = 0
	ride.save()
	return render(request, 'goride/success-quit.html')

def completeView(request, pk):
	ride = Ride.objects.get(pk = pk)
	ride.status = 'c'
	ride.save()
	return render(request, 'goride/complete.html', {'ride':ride})









